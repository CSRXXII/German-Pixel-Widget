{
  "always_run_in_app" : false,
  "icon" : {
    "color" : "deep-blue",
    "glyph" : "cannabis"
  },
  "name" : "Pixel Launcher",
  "script" : "\/\/ Pixel Launcher v2.3 - by unvsDev\n\/\/ for Setting up Pixel Widget\n\n\/\/ Unauthorized Redistribute is Strictly prohibited.\n\/\/ Contact developer for question, or reporting abuse\n\/\/ You can use Discord to contact @unvsDev!\n\n\/\/ German Fork by jojo-mp4\n\nconst version = 2.3\nconst plName = Script.name()\n\nvar fm = FileManager.iCloud()\nvar fDir = fm.joinPath(fm.documentsDirectory(), \"\/Pixel Widget\")\nif(!fm.fileExists(fDir)){ fm.createDirectory(fDir) }\nvar prefPath = fm.joinPath(fDir, \"pixelPref.txt\")\nvar namePath = fm.joinPath(fDir, \"plName.txt\")\nvar progPath = fm.joinPath(fDir, \"plPlugin.txt\")\n\nfm.writeString(namePath, JSON.stringify({\"name\":plName, \"update\":\"false\"}))\n\nvar defaultJSON = {\"apikey\":\"openweatherapikey\",\"cityid\":\"1835848\",\"layout\":\"pixel\",\"username\":\"Sir\",\"tempunit\":\"metric\",\"locale\":\"en\",\"textcolor\":\"#ffffff\",\"textsize\":\"23\",\"iconcolor\":\"default\",\"iconsize\":\"27\",\"font\":\"Product Sans\",\"fontbold\":\"Product Sans Medium\",\"spacing\":\"45\",\"previewmode\":\"true\",\"previewsize\":\"medium\",\"refreshview\":\"false\",\"greeting1\":\"Good morning\",\"greeting2\":\"Good afternoon\",\"greeting3\":\"Good evening\",\"greeting4\":\"Good night\",\"greeting5\":\"Time to sleep\",\"greeting0\":\"Welcome to Pixel Widget\",\"dateformat\":\"MMMM, EEE dd\",\"quotemode\":\"false\",\"bgmode\":\"solid\",\"bglight\":\"null\",\"bgdark\":\"null\",\"bgcolor\":\"#147158\",\"iconrefresh\":\"true\",\"wallrefresh\":\"true\",\"refreshrate\":\"90\",\"ddaymode\":\"false\",\"ddayname\":\"Christmas\",\"ddaytarg\":\"2021-12-25\",\"hideb\":\"false\",\"event\":\"true\"}\n\nvar optionName = {\n  \"apikey\": \"Openweather API Key\",\n  \"cityid\": \"City ID\",\n  \"layout\": \"Widget Layout\",\n  \"username\": \"Username\",\n  \"tempunit\": \"Temperature Unit\",\n  \"locale\": \"Locale\",\n  \"textcolor\": \"Text Color\",\n  \"textsize\": \"Text Size\",\n  \"iconcolor\": \"Icon Color\",\n  \"iconsize\": \"Icon Size\",\n  \"font\": \"Font\",\n  \"fontbold\": \"Bold Font\",\n  \"spacing\": \"Top Spacing\",\n  \"previewmode\": \"Preview Mode\",\n  \"previewsize\": \"Preview Size\",\n  \"refreshview\": \"RefreshView\",\n  \"greeting1\": \"Morning Greeting\",\n  \"greeting2\": \"Afternoon Greeting\",\n  \"greeting3\": \"Evening Greeting\",\n  \"greeting4\": \"Night Greeting\",\n  \"greeting5\": \"Sleep Greeting\",\n  \"greeting0\": \"Fixed Greeting\",\n  \"dateformat\": \"Date Format\",\n  \"quotemode\": \"Use Fixed Greeting\",\n  \"bgmode\": \"Background Mode\",\n  \"bglight\": \"Select Light Background\",\n  \"bgdark\": \"Select Dark Background\",\n  \"bgcolor\": \"Background Color\",\n  \"iconrefresh\": \"Always Refresh Weather Icon\",\n  \"wallrefresh\": \"Always Refresh Wallpaper\",\n  \"refreshrate\": \"Widget Refresh Rate\",\n  \"ddaymode\": \"Day Count Mode\",\n  \"ddayname\": \"Day Count Name\",\n  \"ddaytarg\": \"Day Count Date\",\n  \"hideb\": \"Hide Battery Icon\",\n  \"event\": \"Show Event\"\n}\n\nvar optionFormat = {\n  \"apikey\": \"For weather service\",\n  \"cityid\": \"Fixed Location\",\n  \"layout\": \"(pixel, siri)\",\n  \"username\": \"To be shown on your Widget\",\n  \"tempunit\": \"(metric, imperial)\",\n  \"locale\": \"For language customization\",\n  \"textcolor\": \"(auto, or Color Hex Code)\",\n  \"textsize\": \"(Number)\",\n  \"iconcolor\": \"(auto, default, or Color Hex Code)\",\n  \"iconsize\": \"(Number)\",\n  \"font\": \"(Font Name)\",\n  \"fontbold\": \"(Font Name)\",\n  \"spacing\": \"(Number)\",\n  \"previewmode\": \"(true, false) - show preview\",\n  \"previewsize\": \"(small, medium, large)\",\n  \"refreshview\": \"(true, false) - show last refreshed time\",\n  \"greeting1\": \"(String) - 5am ~ 11am\",\n  \"greeting2\": \"(String) - 12pm ~ 5pm\",\n  \"greeting3\": \"(String) - 6pm ~ 9pm\",\n  \"greeting4\": \"(String) - 10pm ~ 11pm\",\n  \"greeting5\": \"(String) - 12am ~ 4am\",\n  \"greeting0\": \"(String) - shows when UseFixedGreeting is true\",\n  \"dateformat\": \"(Date Format) - show date\",\n  \"quotemode\": \"(true, false) - show fixed greeting\",\n  \"bgmode\": \"(auto, fixed, solid, or gradient)\",\n  \"bglight\": \"for fixed & auto mode\",\n  \"bgdark\": \"for auto mode\",\n  \"bgcolor\": \"(Color Hex Code) - solid mode\",\n  \"iconrefresh\": \"(true, false) - recommended option\",\n  \"wallrefresh\": \"(true, false) - recommended option\",\n  \"refreshrate\": \"(second)\",\n  \"ddaymode\": \"(true, false)\",\n  \"ddayname\": \"(Name)\",\n  \"ddaytarg\": \"YYYY-MM-DD\",\n  \"hideb\": \"(true, false)\",\n  \"event\": \"(true, false)\"\n}\n\nvar welcomemode = 0\n\n\/\/ Preparing File\nlet prefData0; var settingmode = 0; var pluginmode = 0;\nif(!(fm.fileExists(prefPath))) {\n  welcomemode = 1\n  await fm.writeString(prefPath, JSON.stringify(defaultJSON))\n}\n\nvar orgProgData = {\n    \"covidkr1\": false,\n    \"covidkr2\": \"Hide\",\n    \"minimemo\": \"\",\n    \"minidday\": [\"\", \"\"]\n}\nlet progData\nif(!(fm.fileExists(progPath))) {\n  progData = orgProgData\n  await fm.writeString(progPath, JSON.stringify(progData))\n}\n\n\/\/ Main Menu\nlet plAlert = new Alert()\nplAlert.title = welcomemode ? \"Welcome to Pixel Widget!\" : \"Pixel Launcher\"\nlet menuOptions = [\"Widget anpassen\", \"Plugins\", \"Allgemeine Einstellungen\"]\nfor(const option of menuOptions) {\n  plAlert.addAction(option)\n}\nplAlert.addCancelAction(\"fertig\")\nlet response = await plAlert.presentAlert()\nif(response == 1){\n  pluginmode = 1\n} else if(response == 2) {\n  settingmode = 1\n} else if(response == -1) {\n  return 0\n}\n\n\nif(pluginmode){\n  progData = JSON.parse(fm.readString(progPath))\n  \n  \/\/ Auto Update Preferences\n  var cnt = 0\n  for(i in orgProgData){\n    if(progData[i] == undefined){\n      cnt = cnt + 1\n      progData[i] = orgProgData[i]\n      console.log(\"[!] Updating preferences.. (\" + cnt + \")\")\n    }\n  }\n  \n  let pluginMenu = new UITable()\n  pluginMenu.showSeparators = true\n  \n  const covidkr1 = new UITableRow()\n  covidkr1.dismissOnSelect = false\n  covidkr1.addText(\"Covid-19 KR Information\", \"코로나19 확진자 정보를 간단히 알려줍니다. (KR Local)\")\n  pluginMenu.addRow(covidkr1)\n  \n  covidkr1.onSelect = async () => {\n    let pAlert = new Alert()\n    pAlert.title = \"Edit Covid-19 KR Information\"\n    pAlert.message = \"Currently set to \\\"\" + (progData.covidkr1 ? \"Show\" : \"Hide\") + \"\\\"\"\n    pAlert.addAction(\"Show\")\n    pAlert.addAction(\"Hide\")\n    progData.covidkr1 = (await pAlert.present() ? false : true)\n  }\n  \n  const covidkr2 = new UITableRow()\n  covidkr2.dismissOnSelect = false\n  covidkr2.addText(\"QR Check-in Shortcut\", \"QR 체크인 바로가기를 보여줍니다. (KR Local)\")\n  pluginMenu.addRow(covidkr2)\n  \n  covidkr2.onSelect = async () => {\n    let pAlert = new Alert()\n    pAlert.title = \"Edit QR Check-in Shortcut\"\n    pAlert.message = \"Currently set to \\\"\" + progData.covidkr2 + \"\\\"\"\n    pAlert.addAction(\"Show Naver\")\n    pAlert.addAction(\"Show Kakao\")\n    pAlert.addAction(\"Hide\")\n    let response = await pAlert.present()\n    if(response == 0) { progData.covidkr2 = \"Naver\" }\n    else if(response == 1) { progData.covidkr2 = \"Kakao\" }\n    else { progData.covidkr2 = \"Hide\" }\n  }\n  \n  const minimemo = new UITableRow()\n  minimemo.dismissOnSelect = false\n  minimemo.addText(\"Mini Memo\", \"Type your quote, or short memo!\")\n  pluginMenu.addRow(minimemo)\n  \n  minimemo.onSelect = async () => {\n    let pAlert = new Alert()\n    pAlert.title = \"Edit Mini Memo\"\n    pAlert.message = (progData.minimemo.length < 1 ? \"Mini Memo is turned off currently.\" : \"Mini Memo is set to \\\"\" + progData.minimemo + \"\\\"\") + \"\\nLeave it blank to set to hide.\"\n    pAlert.addTextField(\"Type Memo\", progData.minimemo)\n    pAlert.addCancelAction(\"Cancel\")\n    pAlert.addAction(\"Done\")\n    let response = await pAlert.present()\n    if(response != -1) {\n      progData.minimemo = pAlert.textFieldValue()\n    }\n  }\n  \n  const minidday = new UITableRow()\n  minidday.dismissOnSelect = false\n  minidday.addText(\"Mini Day Counter\", \"Celebrate your special day!\")\n  pluginMenu.addRow(minidday)\n  \n  minidday.onSelect = async () => {\n    let pAlert = new Alert()\n    pAlert.title = \"Edit Mini Day Counter\"\n    pAlert.message = (progData.minidday[0].length < 1 ? \"Day counter is turned off currently.\" : progData.minidday[1] + \" is set to \" + progData.minidday[0]) + \"\\nLeave it blank to set to hide, or input Target Date.\"\n    pAlert.addTextField(\"YYYY-MM-DD\", progData.minidday[0])\n    pAlert.addTextField(\"Day Count Name\", progData.minidday[1])\n    pAlert.addCancelAction(\"Cancel\")\n    pAlert.addAction(\"Done\")\n    let response = await pAlert.present()\n    if(response != -1) {\n      progData.minidday[0] = pAlert.textFieldValue(0)\n      progData.minidday[1] = pAlert.textFieldValue(1)\n    }\n  }\n  \n  await pluginMenu.present()\n  \n  await fm.writeString(progPath, JSON.stringify(progData))\n  \n  return 0\n}\n\n\n\/\/ General Settings\nif(settingmode){\n  let settings = new UITable()\n  settings.showSeparators = true\n  \n  const option1 = new UITableRow()\n  option1.dismissOnSelect = false\n  option1.addText(\"Install Font Profile\")\n  settings.addRow(option1)\n  \n  option1.onSelect = async () => {\n    var fontURL = await new Request(\"https:\/\/pastebin.com\/raw\/rfHS7Xey\").loadString()\n    Safari.openInApp(fontURL, false)\n  }\n  \n  const option2 = new UITableRow()\n  option2.dismissOnSelect = true\n  option2.addText(\"Reset Widget\")\n  settings.addRow(option2)\n  \n  option2.onSelect = async () => {\n    let resetAlert = new Alert()\n    resetAlert.title = \"Reset Confirmation\"\n    resetAlert.message = \"Do you really want to reset all Data? This includes Preference, and Your secure data.\"\n    resetAlert.addCancelAction(\"Cancel\")\n    resetAlert.addDestructiveAction(\"Confirm\")\n    let response = await resetAlert.presentAlert()\n    if(response != -1) {\n      fm.remove(prefPath)\n      return 0\n    }\n    await settings.present()\n  }\n  \n  const option3 = new UITableRow()\n  option3.dismissOnSelect = true\n  option3.addText(\"Request Force Update\", \"Current: v\" + version)\n  settings.addRow(option3)\n  \n  option3.onSelect = async () => {\n    fm.writeString(namePath, JSON.stringify({\"name\":plName, \"update\":\"true\"}))\n    let fuAlert = new Alert()\n    fuAlert.title = \"Requested Update\"\n    fuAlert.message = \"Launch Pixel Widget to begin Update. Your Preferences won't be deleted.\"\n    fuAlert.addAction(\"OK\")\n    \n    await fuAlert.present()\n    \n    await settings.present()\n  }\n  \n  const option4 = new UITableRow()\n  option4.dismissOnSelect = false\n  option4.addText(\"Github\")\n  settings.addRow(option4)\n  \n  option4.onSelect = () => {\n    Safari.openInApp(\"https:\/\/github.com\/unvsDev\/pixel-widget\", false)\n  }\n  \n  await settings.present()\n  \n  return 0\n}\n\n\n\/\/ Edit Preferences\nfm.downloadFileFromiCloud(prefPath)\nprefData0 = fm.readString(prefPath)\nlet prefData = JSON.parse(prefData0)\n\nvar prevData = {\n  \"apikey\": prefData.apikey,\n  \"cityid\": prefData.cityid,\n  \"layout\": prefData.layout,\n  \"username\": prefData.username,\n  \"tempunit\": prefData.tempunit,\n  \"locale\": prefData.locale,\n  \"textcolor\": prefData.textcolor,\n  \"textsize\": prefData.textsize,\n  \"iconcolor\": prefData.iconcolor,\n  \"iconsize\": prefData.iconsize,\n  \"font\": prefData.font,\n  \"fontbold\": prefData.fontbold,\n  \"spacing\": prefData.spacing,\n  \"previewmode\": prefData.previewmode,\n  \"previewsize\": prefData.previewsize,\n  \"refreshview\": prefData.refreshview,\n  \"greeting1\": prefData.greeting1,\n  \"greeting2\": prefData.greeting2,\n  \"greeting3\": prefData.greeting3,\n  \"greeting4\": prefData.greeting4,\n  \"greeting5\": prefData.greeting5,\n  \"greeting0\": prefData.greeting0,\n  \"dateformat\": prefData.dateformat,\n  \"quotemode\": prefData.quotemode,\n  \"bgmode\": prefData.bgmode,\n  \"bglight\": prefData.bglight,\n  \"bgdark\": prefData.bgdark,\n  \"bgcolor\": prefData.bgcolor,\n  \"iconrefresh\": prefData.iconrefresh,\n  \"wallrefresh\": prefData.wallrefresh,\n  \"refreshrate\": prefData.refreshrate,\n  \"ddaymode\": prefData.ddaymode,\n  \"ddayname\": prefData.ddayname,\n  \"ddaytarg\": prefData.ddaytarg,\n  \"hideb\": prefData.hideb,\n  \"event\": prefData.event\n}\n\n\/\/ Auto Update Preferences\nvar cnt = 0\nfor(i in defaultJSON){\n  if(prevData[i] == undefined){\n    cnt = cnt + 1\n    prevData[i] = defaultJSON[i]\n    console.log(\"[!] Updating preferences.. (\" + cnt + \")\")\n  }\n}\n\nconst settings = new UITable()\nsettings.showSeparators = true\n\nvar optionList = []\nfor(title in prevData){\n  \/\/ Settings List\n  const option = new UITableRow()\n  optionList.push(title)\n  option.dismissOnSelect = false\n  option.addText(optionName[title], optionFormat[title])\n  settings.addRow(option)\n  option.onSelect = async (number) => {\n    if(number != 24 && number != 25 && number != 26){\n      let editAlert = new Alert()\n      editAlert.title = \"Edit \" + optionName[optionList[number]]\n      editAlert.addTextField(optionFormat[optionList[number]], prevData[optionList[number]].toString())\n      editAlert.addCancelAction(\"Cancel\")\n      editAlert.addAction(\"Done\")\n      if(await editAlert.present() == 0){\n        prevData[optionList[number]] = editAlert.textFieldValue()\n      }\n    } else if(number == 24){\n      let bgPickerAlert = new Alert()\n      bgPickerAlert.title = \"Edit Wallpaper Mode\"\n      bgPickerAlert.message = \"Currently set to \" + prevData.bgmode + \".\"\n      bgPickerAlert.addAction(\"Fixed - One wallpaper\")\n      bgPickerAlert.addAction(\"Auto - Two wallpaper\")\n      bgPickerAlert.addAction(\"Solid - Simple color\")\n      bgPickerAlert.addAction(\"Gradient - Based on current time\")\n      bgPickerAlert.addCancelAction(\"Cancel\")\n      let response = await bgPickerAlert.present()\n      if(response == 0) { prevData.bgmode = \"fixed\" }\n      else if(response == 1) { prevData.bgmode = \"auto\" }\n      else if(response == 2) { prevData.bgmode = \"solid\" }\n      else if(response == 3) { prevData.bgmode = \"gradient\" }\n      \n    } else if(number == 25){\n      if(prevData.bgmode == \"fixed\" || prevData.bgmode == \"auto\") {\n        prevData.bglight = await DocumentPicker.openFile()\n        let bgPickerAlert = new Alert()\n        bgPickerAlert.title = \"Light Wallpaper\"\n        bgPickerAlert.message = \"Successfully saved your wallpaper!\"\n        bgPickerAlert.addAction(\"OK\")\n        await bgPickerAlert.present()\n      } else {\n        let bgPickerAlert = new Alert()\n        bgPickerAlert.title = \"Light Wallpaper\"\n        bgPickerAlert.message = \"You can edit this area\\nif you're in fixed \/ auto mode.\"\n        bgPickerAlert.addAction(\"OK\")\n        await bgPickerAlert.present()\n      }\n    } else if(number == 26){\n      if(prevData.bgmode == \"auto\") {\n        prevData.bgdark = await DocumentPicker.openFile()\n        let bgPickerAlert = new Alert()\n        bgPickerAlert.title = \"Dark Wallpaper\"\n        bgPickerAlert.message = \"Successfully saved your wallpaper!\"\n        bgPickerAlert.addAction(\"OK\")\n        await bgPickerAlert.present()\n      } else {\n        let bgPickerAlert = new Alert()\n        bgPickerAlert.title = \"Dark Wallpaper\"\n        bgPickerAlert.message = \"You can edit this area if you're in auto mode.\"\n        bgPickerAlert.addAction(\"OK\")\n        await bgPickerAlert.present()\n      }\n    }\n  }\n}\nawait settings.present()\n\nfm.writeString(prefPath, JSON.stringify(prevData))\n\nScript.complete()\n\nasync function generateAlert(title,message,options) {\n  let alert = new Alert()\n  alert.title = title\n  alert.message = message\n  \n  for (const option of options) {\n    alert.addAction(option)\n  }\n  \n  let response = await alert.presentAlert()\n  return response\n}\n",
  "share_sheet_inputs" : [

  ]
}