{
  "always_run_in_app" : false,
  "icon" : {
    "color" : "red",
    "glyph" : "space-shuttle"
  },
  "name" : "PixelWidget_1.0.2",
  "script" : "\/\/ Pixel Widget alpha 1.0.2 by Xkfdhrwhdk\n\/\/ Inspired by Google Pixel's 'at a Glance' widget\n\/\/ COVID-19 Plugin for Korea\n\/\/ Auto Updater\n\/\/ Synced Preferences & Custom Localization\n\n\/\/ Widget 자체 설정 값\nconst bnumber = 1002; \/\/ DO NOT EDIT THIS AREA\nconst IGNORE_UPDATE = false; \/\/ NOT recommended\nconst UPDATE_TEST = false; \/\/ 업데이트 화면 테스트\n\/\/ 자체 설정값 끝\n\n\/\/ FileManager\nvar fm = FileManager.iCloud()\nvar w_path = \"\/var\/mobile\/Library\/Mobile Documents\/iCloud~dk~simonbs~Scriptable\/Documents\/scr_mode.txt\";\n\nif(!config.runsInWidget){ \/\/ Bulit-in PWL\n  const updateServer = \"https:\/\/pastebin.com\/raw\/SxUuh0bX\"\n  var latestVer = await new Request(updateServer).loadString()\n  \n  const codeServer = \"https:\/\/pastebin.com\/raw\/QNPn042a\"\n  var latestCode = await new Request(codeServer).loadString()\n  \n  \/\/ Auto Light & Dark Wallpaper\n  if(Device.isUsingDarkAppearance()) {\n    fm.writeString(w_path, \"dark\")\n  } else {\n    fm.writeString(w_path, \"light\")\n  }\n  \n  if(IGNORE_UPDATE) {\n    let updateAlert = new Alert()\n    updateAlert.title = \"자동 업데이트가 중단됨\"\n    updateAlert.message = \"최적의 사용자 경험을 위해 항상 최신 버전으로 업데이트하실 것을 권장합니다.\"\n    updateAlert.addCancelAction(\"확인\")\n    updateAlert.addDestructiveAction(\"무시\")\n    let response = await updateAlert.presentAlert()\n    if(response == -1) { return 0 }\n  }\n  \n  let alert = new Alert()\n  alert.title = \"Pixel Widget Launcher\"\n  alert.message = \"환영합니다. 메뉴를 선택해 주세요.\"\n  let menuOptions = [\"위젯 미리보기\", \"Pixel Widget 설치 (\" + latestCode + \")\", \"Pixel Preference 설치\", \"전용 폰트 설치하기\", \"투명 위젯 만들기\", \"크레딧\", \"공식 디스코드\"]\n  for(const option of menuOptions) {\n    alert.addAction(option)\n  }\n  alert.addCancelAction(\"완료\")\n  let response = await alert.presentSheet()\n  if(response == 0){\n    \n  } else if(response == 1){\n    var updateLink = await new Request(\"https:\/\/pastebin.com\/raw\/ntiKwgUJ\").loadString()\n    Safari.openInApp(updateLink, false)\n    return 0\n  } else if(response == 2) {\n    var updateLink2 = await new Request(\"https:\/\/pastebin.com\/raw\/Lbj8T8ki\").loadString()\n    Safari.openInApp(updateLink2, false)\n    return 0\n  } else if(response == 3) {\n    var fontLink = await new Request(\"https:\/\/pastebin.com\/raw\/rfHS7Xey\").loadString()\n    Safari.openInApp(fontLink, false)\n    return 0\n  } else if(response == 4) {\n    var clearWidget = await new Request(\"https:\/\/pastebin.com\/raw\/Fw4L2vpR\").loadString()\n    Safari.openInApp(clearWidget, false)\n    return 0\n  } else if(response == 5) {\n    let devAlert = new Alert()\n    devAlert.title = \"Credit\"\n    devAlert.message = \"Made by xkfdhrwhdk (JaiIbreak)\\n참여해주신 베타테스터 여러분 감사합니다!\\n폰트 프로파일 by Max\\n코로나 라이브 by munbbok\"\n    devAlert.addAction(\"확인\")\n    await devAlert.presentAlert()\n    return 0\n  } else if(response == 6) {\n    let noticeDiscord = new Alert()\n    noticeDiscord.title = \"디스코드 참여 안내\"\n    noticeDiscord.message = \"디스코드의 경우, 참여 가능 기간이 아니면 링크가 유효하지 않을 수도 있습니다.\"\n    noticeDiscord.addAction(\"확인\")\n    await noticeDiscord.presentAlert()\n    var discordLink = await new Request(\"https:\/\/pastebin.com\/raw\/axwUQepj\").loadString()\n    Safari.openInApp(discordLink, false)\n    return 0\n  } else if(response == -1) {\n    return 0\n  }\n}\n\n\/\/ main code\nlet pl = importModule('Pixel Preference')\n\nlet API_WEATHER = pl.apikey();\nlet CITY_WEATHER = pl.cityid();\nlet USERNAME = pl.username();\nlet TEMP_UNIT = pl.tempunit();\n\nlet THEME_COLOR = pl.themecolor();\nconst SPACING = pl.spacing();\nconst TEXT_SIZE = pl.textsize();\nconst WICON_SIZE = pl.wiconsize();\n\nconst PREVIEW_MODE = pl.preference(1);\nconst PREVIEW_SIZE = pl.preference(2);\nconst REFRESH_VIEW = pl.preference(3);\nconst LAYOUT_MODE = pl.preference(4);\nconst COVID_MODE = pl.preference(5);\n\nconst AUTO_WALL = pl.autowall();\nvar FONT_PACK = pl.fontpack();\nconst FONT_NAME = FONT_PACK[0];\nconst FONT_NAME_BOLD = FONT_PACK[1];\n\/\/ 초기값 입력 부분 끝\n\n\/\/ 위젯에 표시되는 요일 체계\nvar days = pl.custom(1);\nvar months = pl.custom(2);\n\n\/\/ 날짜 계산\nconst today = new Date();\n\nvar weekday = days[ today.getDay() ];\nvar month = months[ today.getMonth() ];\nvar date = today.getDate();\nvar hour = today.getHours();\nvar minute = today.getMinutes();\n\n\/\/ 날짜 포맷팅\nlet df_Name = new DateFormatter()\nlet df_Month = new DateFormatter()\ndf_Name.dateFormat = \"EEEE\"\ndf_Month.dateFormat = \"MMMM\"\n\nfunction formatTime(date) { \/\/ 현지화 날짜 리턴\n    let df = new DateFormatter()\n    df.useNoDateStyle()\n    df.useShortTimeStyle()\n    return df.string(date)\n}\n\nconst dayName = df_Name.string(today)\nconst dayNumber = today.getDate().toString()\nconst monthName = df_Month.string(today)\n\n\/\/ 이벤트 처리\nconst events = await CalendarEvent.today([])\nlet futureEvents = []\n\n\/\/ 날씨 아이콘 및 데이터 구성\n\/\/Get storage\nvar base_path = \"\/var\/mobile\/Library\/Mobile Documents\/iCloud~dk~simonbs~Scriptable\/Documents\/weather\/\";\n\n\/\/ Fetch Image from Url\nasync function fetchimageurl(url) {\n   const request = new Request(url)\n   var res = await request.loadImage();\n   return res;\n}\n\n\/\/ Load image from local drive\nasync function fetchimagelocal(path){\n  var finalPath = base_path + path + \".png\";\n  if(fm.fileExists(finalPath)==true){\n   console.log(\"file exists: \" + finalPath);\n   return finalPath;\n  }else{\n   \/\/throw new Error(\"Error file not found: \" + path);\n   if(fm.fileExists(base_path)==false){\n     console.log(\"Directry not exist creating one.\");\n     fm.createDirectory(base_path);\n   }\n   console.log(\"Downloading file: \" + finalPath);\n   await downloadimg(path);\n   if(fm.fileExists(finalPath)==true){\n     console.log(\"file exists after download: \" + finalPath);\n     return finalPath;\n   }else{\n     throw new Error(\"Error file not found: \" + path);\n   }\n  }\n}\n\nasync function downloadimg(path){\n   const url = \"http:\/\/a.animedlweb.ga\/weather\/weathers25_2.json\";\n   const data = await fetchWeatherData(url);\n   var dataimg = null;\n   var name = null;\n   if(path.includes(\"bg\")){\n     dataimg = data.background;\n     name = path.replace(\"_bg\",\"\");\n   }else{\n     dataimg = data.icon;\n     name = path.replace(\"_ico\",\"\");\n   }\n   var imgurl=null;\n   switch (name){\n     case \"01d\":\n      imgurl = dataimg._01d;\n     break;\n     case \"01n\":\n      imgurl = dataimg._01n;\n     break;\n     case \"02d\":\n      imgurl = dataimg._02d;\n     break;\n     case \"02n\":\n      imgurl = dataimg._02n;\n     break;\n     case \"03d\":\n      imgurl = dataimg._03d;\n     break;\n     case \"03n\":\n      imgurl = dataimg._03n;\n     break;\n     case \"04d\":\n      imgurl = dataimg._04d;\n     break;\n     case \"04n\":\n      imgurl = dataimg._04n;\n     break;\n     case \"09d\":\n      imgurl = dataimg._09d;\n     break;\n     case \"09n\":\n      imgurl = dataimg._09n;\n     break;\n     case \"10d\":\n      imgurl = dataimg._10d;\n     break;\n     case \"10n\":\n      imgurl = dataimg._10n;\n     break;\n     case \"11d\":\n      imgurl = dataimg._11d;\n     break;\n     case \"11n\":\n      imgurl = dataimg._11n;\n     break;\n     case \"13d\":\n      imgurl = dataimg._13d;\n     break;\n     case \"13n\":\n      imgurl = dataimg._13n;\n     break;\n     case \"50d\":\n      imgurl = dataimg._50d;\n     break;\n     case \"50n\":\n      imgurl = dataimg._50n;\n     break;\n   }\n   const image = await fetchimageurl(imgurl);\n   console.log(\"Downloaded Image\");\n   fm.writeImage(base_path+path+\".png\",image);\n}\n\n\/\/get Json weather\nasync function fetchWeatherData(url) {\n  const request = new Request(url);\n  const res = await request.loadJSON();\n  return res;\n}\n\nlet wetherurl = \"http:\/\/api.openweathermap.org\/data\/2.5\/weather?id=\" + CITY_WEATHER + \"&APPID=\" + API_WEATHER + \"&units=\" + TEMP_UNIT;\n\nconst weatherJSON = await fetchWeatherData(wetherurl);\nconst cityName = weatherJSON.name;\nconst weatherarry = weatherJSON.weather;\nconst iconData = weatherarry[0].icon;\nconst weathername = weatherarry[0].main;\nconst curTempObj = weatherJSON.main;\nconst curTemp = curTempObj.temp;\nconst highTemp = curTempObj.temp_max;\nconst lowTemp = curTempObj.temp_min;\nconst feel_like = curTempObj.feels_like;\n\n\/\/ 날씨 가져오기 끝\n\n\n\/\/ Greetings arrays per time period. \nvar greetingsMorning = pl.greeting(1);\nvar greetingsAfternoon = pl.greeting(2);\nvar greetingsEvening = pl.greeting(3);\nvar greetingsNight = pl.greeting(4);\nvar greetingsLateNight = pl.greeting(5);\n\n\/\/ Holiday customization\nvar holidaysByKey = {\n   \/\/ month,week,day: datetext\n   \"11,4,4\": \"Happy Thanksgiving!\"\n}\n\nvar holidaysByDate = {\n   \/\/ month,date: greeting\n   \"1,1\": \"Happy \" + (today.getFullYear()).toString() + \"!\",\n   \"10,31\": \"Happy Halloween!\",\n   \"12,25\": \"Merry Christmas!\"\n}\n\nvar holidayKey = (today.getMonth() + 1).toString() + \",\" +  (Math.ceil(today.getDate() \/ 7)).toString() + \",\" + (today.getDay()).toString();\n\nvar holidayKeyDate = (today.getMonth() + 1).toString() + \",\" + (today.getDate()).toString();\n\nvar dateString = pl.dateformat();\n\n\/\/ Support for multiple greetings per time period\nfunction randomGreeting(greetingArray) {\n   return Math.floor(Math.random() * greetingArray.length);\n}\n\n\/\/ Greeting Label procedure\nvar greeting = new String(\"Dokdo is Korea's Territory\")\nif (hour < 5 && hour >= 1) { \/\/ 1am - 5am\n   greeting = greetingsLateNight[randomGreeting(greetingsLateNight)];\n} else if (hour >= 23 || hour < 1) { \/\/ 11pm - 1am\n   greeting = greetingsNight[randomGreeting(greetingsNight)];\n} else if (hour < 12) { \/\/ Before noon (5am - 12pm)\n   greeting = greetingsMorning[randomGreeting(greetingsMorning)];\n} else if (hour >= 12 && hour <= 17) { \/\/ 12pm - 5pm\n   greeting = greetingsAfternoon[randomGreeting(greetingsAfternoon)];\n} else if (hour > 17 && hour < 23) { \/\/ 5pm - 11pm\n   greeting = greetingsEvening[randomGreeting(greetingsEvening)];\n} \n\n\/\/ Overwrite greeting if calculated holiday\nif (holidaysByKey[holidayKey]) {\n   greeting = holidaysByKey[holidayKey];\n}\n\n\/\/ Overwrite all greetings if specific holiday\nif (holidaysByDate[holidayKeyDate]) {\n   greeting = holidaysByDate[holidayKeyDate];\n}\n\n\n\/\/ 위젯 레이아웃\nlet pwidget = new ListWidget();\n\nvar now = new Date().getTime()\n\n\/\/ Widget Auto-Update\nif(!IGNORE_UPDATE) {\n    \/\/ console.log('[*] Checking update : ' + latestVer)\n\n    if(UPDATE_TEST || (bnumber < parseInt(latestVer))) { \/\/ Update process\n        pwidget.addSpacer();\n        let updateLabel = pwidget.addText(\"Update Available\")\n        updateLabel.font = new Font(FONT_NAME_BOLD, 26);\n        updateLabel.textColor = THEME_COLOR\n        updateLabel.centerAlignText()\n        \n        pwidget.backgroundColor = new Color(\"#5e77f9\")\n        \n        pwidget.addSpacer();\n        pwidget.setPadding(0, 0, 0, 0);\n        \n        Script.setWidget(pwidget)\n        \n        let updateNoti = new Notification()\n        updateNoti.title = \"Pixel Widget\"\n        updateNoti.body = \"New update available! Download it on PWL.\"\n        await updateNoti.schedule()\n        return 1\n        \/\/ Force End\n    }\n}\n\npwidget.addSpacer(SPACING); \/\/ Top Spacing\n\nfor (const event of events) {\n    if (futureEvents.length == 1) { break } \/\/ Getting one event\n    if (event.startDate.getTime() > today.getTime() && !event.isAllDay) {\n        if (Math.floor((event.startDate.getTime() - now) \/ (1000 * 60) \/ 60) <= 6) {\n            \/\/ If event is less than 6 hours ahead\n            futureEvents.push(event)\n        }\n    }\n}\n\nvar img = Image.fromFile(await fetchimagelocal(iconData + \"_ico\"));\n\nif (futureEvents.length != 0) { \/\/ has event\n    let futureEvent = futureEvents[0]\n    \n    var target = futureEvent.startDate.getTime()\n    var distance = target - now\n    var eventMinute = Math.floor(distance \/ (1000 * 60) % 60)\n    var eventHour = Math.floor(distance \/ (1000 * 60) \/ 60)\n\n    \/\/ Show ahead time; First Line\n    let eventLabel = pwidget.addText(futureEvent.title + ' in ' + eventHour + ' hr ' + eventMinute + ' min')\n    eventLabel.font = new Font(FONT_NAME_BOLD, TEXT_SIZE);\n    eventLabel.textColor = THEME_COLOR\n    eventLabel.url = \"calshow:\/\/\"\n    eventLabel.centerAlignText()\n\n    pwidget.addSpacer(8)\n\n    \/\/ Second Line\n    let hStack = pwidget.addStack()\n    hStack.layoutHorizontally()\n    hStack.addSpacer()\n    \n    \/\/ Calendar SFSymbol Icon\n    let calSymbol = SFSymbol.named(\"calendar\")\n    let calElement = hStack.addImage(calSymbol.image)\n    calElement.imageSize = new Size(18, 18)\n    calElement.tintColor = Color.white()\n    calElement.imageOpacity = 0.6\n\n    \/\/ Event Duration\n    let duration = hStack.addText(\" \" + formatTime(futureEvent.startDate) + \" - \" + formatTime(futureEvent.endDate) + \"  |  \")\n    duration.font = new Font(FONT_NAME, 16);\n    duration.textColor = THEME_COLOR\n    duration.textOpacity = (0.7)\n\n    \/\/ Weather Icon\n    let weatherIcon = hStack.addImage(img)\n    weatherIcon.imageSize = new Size(18, 18)\n    weatherIcon.centerAlignImage()\n\n    \/\/ Tempeture Label\n    let tempLabel = hStack.addText(\" \" + Math.round(curTemp).toString() + \"°C\")\n    tempLabel.font = new Font(FONT_NAME, 16);\n    tempLabel.textColor = THEME_COLOR\n    tempLabel.textOpacity = (0.7)\n    tempLabel.centerAlignText()\n\n    tempLabel.url = \"https:\/\/weather.naver.com\/\"\n    weatherIcon.url = \"https:\/\/weather.naver.com\/\"\n\n    \/\/ Show Battery Icon and Percent\n    \/\/batteryModule(hStack)\n\n    hStack.addSpacer()\n\n} else if (LAYOUT_MODE == \"pixel\") { \/\/ pixel layout\n    let hStack = pwidget.addStack()\n    hStack.layoutHorizontally()\n    hStack.addSpacer()\n\n    let dateLabel = hStack.addText(dateString + \" | \"); \/\/*\n    dateLabel.font = new Font(FONT_NAME_BOLD, TEXT_SIZE);\n    dateLabel.textColor = THEME_COLOR\n\n    \/\/ Weather Icon\n    let weatherIcon = hStack.addImage(img);\n    weatherIcon.imageSize = new Size(WICON_SIZE, WICON_SIZE); \/\/ bigger icon\n    weatherIcon.centerAlignImage()\n    \n    hStack.addSpacer(3)\n\n    \/\/ Tempeture Label\n    let tempLabel = hStack.addText(Math.round(curTemp).toString() + \"°C\")\n    tempLabel.font = new Font(FONT_NAME, TEXT_SIZE);\n    tempLabel.textColor = THEME_COLOR\n    tempLabel.centerAlignText()\n\n    tempLabel.url = \"https:\/\/weather.naver.com\/\"\n    weatherIcon.url = \"https:\/\/weather.naver.com\/\"\n\n    hStack.addSpacer()\n\n    pwidget.addSpacer(8)\n\n    \/\/ Second Line\n    let hStack2 = pwidget.addStack()\n    hStack2.layoutHorizontally()\n\n    hStack2.addSpacer()\n    batteryModule(hStack2)\n    hStack2.addSpacer()\n\n} else { \/\/ siri layout\n    \/\/ Greeting label; First Line\n    let greetingLabel = pwidget.addText(greeting)\n    greetingLabel.font = new Font(FONT_NAME_BOLD, TEXT_SIZE);\n    greetingLabel.textColor = THEME_COLOR\n    greetingLabel.centerAlignText()\n\n    pwidget.addSpacer(8)\n\n    \/\/ Second Line\n    let hStack = pwidget.addStack()\n    hStack.layoutHorizontally()\n    hStack.addSpacer()\n\n    \/\/ Date Label\n    let dateLabel = hStack.addText(dateString + \"  |  \") \/\/*\n    dateLabel.font = new Font(FONT_NAME, 16);\n    dateLabel.textColor = THEME_COLOR\n    dateLabel.textOpacity = (0.7)\n    \n    \/\/ Weather Icon\n    let weatherIcon = hStack.addImage(img)\n    weatherIcon.imageSize = new Size(18, 18)\n    weatherIcon.centerAlignImage()\n\n    \/\/ Tempeture Label\n    let tempLabel = hStack.addText(Math.round(curTemp).toString() + \"°C  |  \")\n    tempLabel.font = new Font(FONT_NAME, 16);\n    tempLabel.textColor = THEME_COLOR\n    tempLabel.textOpacity = (0.7)\n    tempLabel.centerAlignText()\n\n    tempLabel.url = \"https:\/\/weather.naver.com\/\"\n    weatherIcon.url = \"https:\/\/weather.naver.com\/\"\n\n    \/\/ Show Battery Icon and Percent\n    batteryModule(hStack)\n\n    hStack.addSpacer()\n\n}\n\n\/\/ Optional Module\nfunction batteryModule(stack) {\n    let batteryImg = stack.addImage(renderBatteryIcon(Device.batteryLevel(),Device.isCharging()));\n    batteryImg.tintColor = new Color(\"#fff\", 0.7);\n    batteryImg.imageSize = new Size(25, 18);\n    let batterytext = stack.addText(\" \" + renderBattery() + '%');\n    batterytext.font = new Font(FONT_NAME, 16);\n    batterytext.textColor = THEME_COLOR;\n    batterytext.textOpacity = (0.7);\n    batterytext.centerAlignText();\n}\n\nfunction renderBattery() { \/\/ Getting Battery Level (Number)\n    const batteryData = Device.batteryLevel();\n    const batteryLevel = Math.round(batteryData * 100);\n    return batteryLevel;\n}\n\nfunction renderBatteryIcon( batteryLevel, charging = false ) { \/\/ Getting Battery Level (Icon)\n    \/\/ If we're charging, show the charging icon.\n    if (charging) { return SFSymbol.named(\"battery.100.bolt\").image }\n\n    \/\/ Set the size of the battery icon.\n    const batteryWidth = 87\n    const batteryHeight = 41\n\n    \/\/ Start our draw context.\n    let draw = new DrawContext()\n    draw.opaque = false\n    draw.respectScreenScale = true\n    draw.size = new Size(batteryWidth, batteryHeight)\n\n    \/\/ Draw the battery.\n    draw.drawImageInRect(SFSymbol.named(\"battery.0\").image, new Rect(0, 0, batteryWidth, batteryHeight))\n\n    \/\/ Match the battery level values to the SFSymbol.\n    const x = batteryWidth*0.1525\n    const y = batteryHeight*0.247\n    const width = batteryWidth*0.602\n    const height = batteryHeight*0.505\n\n    \/\/ Prevent unreadable icons.\n    let level = batteryLevel\n    if (level < 0.05) { level = 0.05 }\n\n    \/\/ Determine the width and radius of the battery level.\n    const current = width * level\n    let radius = height\/6.5\n\n    \/\/ When it gets low, adjust the radius to match.\n    if (current < (radius * 2)) { radius = current \/ 2 }\n\n    \/\/ Make the path for the battery level.\n    let barPath = new Path()\n    barPath.addRoundedRect(new Rect(x, y, current, height), radius, radius)\n    draw.addPath(barPath)\n    draw.setFillColor(Color.black())\n    draw.fillPath()\n    return draw.getImage()\n}\n\n\/\/ Refresh Text\nif(REFRESH_VIEW) {\n  pwidget.addSpacer(3);\n  let refreshText = pwidget.addText('Last Updated at ' + formatTime(today));\n  refreshText.font = new Font(FONT_NAME, 13);\n  refreshText.textColor = THEME_COLOR;\n  refreshText.textOpacity = (0.5);\n  refreshText.centerAlignText();\n}\n\n\/\/ COVID-19 Plugin KR\nif(COVID_MODE) {\n  \/\/ Source 1:Orig\n  const source = 'http:\/\/ncov.mohw.go.kr'\n  let webView = new WebView()\n  await webView.loadURL(source)\n\n  let covid = await webView.evaluateJavaScript(`\n      const baseSelector = 'div.mainlive_container div.liveboard_layout '\n      let date = document.querySelector(baseSelector + 'h2 span.livedate').innerText\n      let domestic = document.querySelector(baseSelector + 'div.liveNum_today_new ul li:nth-child(1) span.data').innerText\n      let overseas = document.querySelector(baseSelector + 'div.liveNum_today_new ul li:nth-child(2) span.data').innerText\n      \n      completion({date, count: {\n          domestic, overseas\n      }})\n  `, true)\n\n  let covid_count = parseInt(covid.count.domestic) + parseInt(covid.count.overseas)\n  let covid_date = covid.date.replace(\/\\(|\\)\/g, '').split(',')[0]\n\/*\n  \/\/ Source 2:HIDDEN CODE\n  const source2 = 'http:\/\/corona-live.com'\n  let webView2 = new WebView()\n  await webView2.loadURL(source2)\n  let covid_live = await webView2.evaluateJavaScript(`\n    setTimeout(() => {\n        let button = document.querySelector('#root-portal button')\n        if (button) button.click()\n        \n        let date = document.querySelector('#__next > div:nth-child(1) > div:nth-child(4) > div:nth-child(1)').innerText\n        let count = document.querySelector('#__next > div:nth-child(1) > div:nth-child(6) > div:nth-child(3) > div:nth-child(5) > strong').innerText.trim()\n        \n        completion({date, count})        \n    }, 2000)\n`, true)\n  let covide_live_count = parseInt(covid_live.count.replace(\/명\/g, ''))\n  let covide_live_date = covid_live.date\n*\/\n\/\/ Layout\n  pwidget.addSpacer(7)\n  \n  let cStack = pwidget.addStack()\n  cStack.layoutHorizontally()\n  cStack.addSpacer()\n  \n  let covidIcon = cStack.addImage(SFSymbol.named(\"info.circle.fill\").image)\n  covidIcon.tintColor = new Color(\"#ec7063\")\n  covidIcon.imageSize = new Size(12, 12);\n  \n  cStack.addSpacer(3)\n\n  let covidText = cStack.addText('COVID-19 Alert : ' + covid_count.toString() + '명 \/ ' + covid_date.toString())\n  covidText.font = new Font(FONT_NAME, 13)\n  covidText.textColor = new Color(\"#ec7063\");\n  covidText.textOpacity = (1.0)\n  covidText.url = 'https:\/\/corona-live.com'\n  covidText.centerAlignText()\n  \n  cStack.addSpacer()\n\n  pwidget.addSpacer(2)\n\/*\n  \/\/ HIDDEN CODE for Corona Live\n  \/\/ 의도된 기능이 작동하지 않을 수 있습니다.\n  let cStackl = pwidget.addStack()\n  cStackl.layoutHorizontally()\n  cStackl.addSpacer()\n  \n  let covidIconl = cStackl.addImage(SFSymbol.named(\"info.circle.fill\").image)\n  covidIconl.tintColor = new Color(\"#ec7063\")\n  covidIconl.imageSize = new Size(12, 12);\n  \n  cStackl.addSpacer(3)\n\n  let clText = cStackl.addText('COVID Live : ' + covide_live_count.toString() + '명 \/ ' + covide_live_date.toString())\n  clText.font = new Font(\"Product Sans\", 13)\n  clText.textColor = new Color(\"#ec7063\")\n  clText.url = 'https:\/\/corona-live.com'\n  clText.centerAlignText()\n  \n  cStackl.addSpacer()\n  \n  pwidget.addSpacer(2)\n*\/\n  let cStack2 = pwidget.addStack()\n  cStack2.layoutHorizontally()\n  cStack2.addSpacer()\n  \n  let arrowIcon = cStack2.addImage(SFSymbol.named(\"arrowshape.turn.up.right.fill\").image)\n  arrowIcon.tintColor = new Color(\"#ec7063\")\n  arrowIcon.imageSize = new Size(12, 12);\n  \n  cStack2.addSpacer(3)\n\n  let qrText = cStack2.addText('QR Check-In')\n  qrText.font = new Font(FONT_NAME, 13)\n  qrText.textColor = new Color(\"#ec7063\")\n  qrText.url = 'https:\/\/nid.naver.com\/login\/privacyQR'\n  qrText.centerAlignText()\n\n  cStack2.addSpacer()\n}\n\n\/\/ Bottom Spacer\npwidget.addSpacer();\npwidget.setPadding(0, 0, 0, 0);\n \n\/\/ Background image\nif (AUTO_WALL) {\n  var themeMode = fm.readString(w_path)\n  let bgimagePath = fm.bookmarkedPath(themeMode)\n  pwidget.backgroundImage = fm.readImage(bgimagePath)\n} else {\n  let bgimagePath = fm.bookmarkedPath(\"still\")\n  pwidget.backgroundImage = fm.readImage(bgimagePath)\n}\n\/\/단색 배경을 사용할 경우, 아래 코드의 주석을 해제하세요.\n\/\/pwidget.backgroundColor = new Color(\"#1f1f1f\")\n\npwidget.refreshAfterDate = new Date(Date.now() + 1000 * 120) \/\/ Refresh every 120 Second\n \n\/\/ Set widget\nScript.setWidget(pwidget);\n\nif (PREVIEW_MODE) {\n  if (PREVIEW_SIZE == \"small\") { pwidget.presentSmall() }\n  if (PREVIEW_SIZE == \"medium\") { pwidget.presentMedium() }\n  if (PREVIEW_SIZE == \"large\") { pwidget.presentLarge() }\n}\n\nScript.complete()",
  "share_sheet_inputs" : [

  ]
}